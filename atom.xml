<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[How to Tell Scary Stories in the Dark]]></title>
  <link href="https://tyler-ball.github.io/atom.xml" rel="self"/>
  <link href="https://tyler-ball.github.io/"/>
  <updated>2014-12-08T09:25:29-08:00</updated>
  <id>https://tyler-ball.github.io/</id>
  <author>
    <name><![CDATA[Tyler Ball]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Creating a Google Hangout on Air]]></title>
    <link href="https://tyler-ball.github.io/blog/2014/12/04/creating-a-google-hangout-on-air/"/>
    <updated>2014-12-04T10:01:29-08:00</updated>
    <id>https://tyler-ball.github.io/blog/2014/12/04/creating-a-google-hangout-on-air</id>
    <content type="html"><![CDATA[<p>I seem to have the magic sauce for creating a Hangout on air, so I wanted to share how I did it.</p>

<h2>1. Log into the account you want to use for creating the Hangout</h2>

<p>For this example I am using my corporate account to create the Hangout.  Open up any Google app (Gmail, Drive, etc.) and select the account switcher in the upper right:</p>

<p><img src="https://tyler-ball.github.io/assets/hangout_images/1_account_selection.png" alt="Account Switch" />
<em>Select the account you want to use for creating the Hangout.</em></p>

<h2>2. Navigate to the Google+ page for your selected account</h2>

<p><img src="https://tyler-ball.github.io/assets/hangout_images/2_view_profile.png" alt="Google Plus" />
<em>Select the </em>View Profile<em> button to be taken to the Google+ page</em></p>

<h2>3. Open the Hangouts page in Google+</h2>

<p><img src="https://tyler-ball.github.io/assets/hangout_images/3_open_hangouts.gif" alt="Open Hangouts Page" />
<em>This menu is in the upper left corner of the page</em></p>

<h2>4. Click the <em>Start a Hangout On Air</em> button</h2>

<p><img src="https://tyler-ball.github.io/assets/hangout_images/4_start_hangout.png" alt="Start Hangout" />
<em>This button is located about halfway down the Hangouts page</em></p>

<h2>5. Enter your Hangout details</h2>

<p>This is where you set the name and optionally the description.  Make sure <em>Opscode, Inc.</em> and <em>Public</em> are in the Audience list at the bottom.  Mine defaults to having them.  You can always invite more audience members later.</p>

<p>If the hangout isn&rsquo;t supposed to start until later (Eg, for a post mortem) you can specify a different date by clicking the <em>Later</em> button.</p>

<p><img src="https://tyler-ball.github.io/assets/hangout_images/5_hangout_details.png" alt="Hangout Details" /></p>

<p>Click the <em>Share</em> button when ready to create the hangout.  This will take you to the Hangout event page where you can manage it.</p>

<p>Click on the <img src="https://tyler-ball.github.io/assets/hangout_images/5_links.png" alt="Links" /> button to see the Youtube link for viewers.</p>

<h2>6.  Start Your Hangout</h2>

<p>When ready click the blue <code>Start</code> button to start the hangout.</p>

<p><img src="https://tyler-ball.github.io/assets/hangout_images/6_start_hangout.png" alt="Start Hangout" /></p>

<p>You can invite people via the popup, but since the Hangout is public it should not be necessary.  Instead, I just copy and paste the hangout URL.  It should look like <code>https://plus.google.com/hangouts/_/hoaevent/AP36tYdnIM762XpHN0-hKUK-5CPW2tjucEk3eLZylFkKqCN864FvRA</code>.</p>

<p>Don&rsquo;t forget to click the <img src="https://tyler-ball.github.io/assets/hangout_images/6_start_broadcast.png" alt="Start Hangout" /> button when you are ready to start recording.  The recording is automatically uploaded to Youtube once it is finished.  Users can view the event live using the Youtube link.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Reloading Gem Sources in Chef]]></title>
    <link href="https://tyler-ball.github.io/blog/2014/10/28/reloading-gem-sources-in-chef/"/>
    <updated>2014-10-28T11:39:11-07:00</updated>
    <id>https://tyler-ball.github.io/blog/2014/10/28/reloading-gem-sources-in-chef</id>
    <content type="html"><![CDATA[<p>I had a situation where we had private gems hosted on an internal repo that needed to be installed on our servers.  To solve this I decided to write a <a href="http://guides.rubygems.org/command-reference/#gem-environment">gemrc</a> configuration file.  This file and its contents seem to always be in flux, depending on the version of Rubygems that is installed.</p>

<p>To solve this problem I wrote the following cookbook (only relevant snippets shown):</p>

<p>In <code>recipes/default.rb</code>:</p>

<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">gem_sources</span> <span class="o">=</span> <span class="o">[</span><span class="s2">&quot;http://rubygems.org/&quot;</span><span class="p">,</span> <span class="s2">&quot;http://custom_server:12345/&quot;</span><span class="o">]</span>

<span class="n">template</span> <span class="s1">&#39;/etc/gemrc&#39;</span> <span class="k">do</span>
  <span class="n">source</span> <span class="s1">&#39;gemrc.erb&#39;</span>
  <span class="n">variables</span> <span class="p">{(</span>
    <span class="ss">:gem_sources</span> <span class="o">=&gt;</span> <span class="n">gem_sources</span>
  <span class="p">)}</span>
  <span class="n">notifies</span> <span class="ss">:create</span><span class="p">,</span> <span class="s2">&quot;ruby_block[refresh_gemrc]&quot;</span><span class="p">,</span> <span class="ss">:immediately</span>
<span class="k">end</span>

<span class="c1"># Some tools don&#39;t read /etc/gemrc and only look at the user one</span>
<span class="n">home_dir</span> <span class="o">=</span> <span class="sb">`echo ~`</span><span class="o">.</span><span class="n">strip</span>
<span class="n">template</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">home_dir</span><span class="si">}</span><span class="s2">/.gemrc&quot;</span> <span class="k">do</span>
  <span class="n">source</span> <span class="s2">&quot;gemrc.erb&quot;</span>
  <span class="n">variables</span> <span class="p">{(</span>
    <span class="ss">:gem_sources</span> <span class="o">=&gt;</span> <span class="n">gem_sources</span>
  <span class="p">)}</span>
  <span class="n">owner</span> <span class="no">File</span><span class="o">.</span><span class="n">stat</span><span class="p">(</span><span class="n">home_dir</span><span class="p">)</span><span class="o">.</span><span class="n">uid</span>
  <span class="n">group</span> <span class="no">File</span><span class="o">.</span><span class="n">stat</span><span class="p">(</span><span class="n">home_dir</span><span class="p">)</span><span class="o">.</span><span class="n">god</span>
  <span class="n">notifies</span> <span class="ss">:create</span><span class="p">,</span> <span class="s2">&quot;ruby_block[refresh_gemrc]&quot;</span><span class="p">,</span> <span class="ss">:immediately</span>
<span class="k">end</span>

<span class="c1"># This updates the current ruby context.  It is not ideal because</span>
<span class="c1"># it uses internal APIs that are not guaranteed</span>
<span class="n">ruby_block</span> <span class="s2">&quot;refresh_gemrc&quot;</span> <span class="k">do</span>
  <span class="n">action</span> <span class="ss">:nothing</span>
  <span class="n">block</span> <span class="k">do</span>
    <span class="no">Gem</span><span class="o">.</span><span class="n">configuration</span> <span class="o">=</span> <span class="no">Gem</span><span class="o">::</span><span class="no">ConfigFile</span><span class="o">.</span><span class="n">new</span> <span class="o">[]</span>
  <span class="k">end</span>
<span class="k">end</span></code></pre></div>


<p>In <code>templates/default/gemrc.erb</code>:</p>

<div class="highlight"><pre><code class="language-yaml" data-lang="yaml"><span class="nn">---</span>
<span class="l-Scalar-Plain">:sources</span><span class="p-Indicator">:</span>
<span class="l-Scalar-Plain">&lt;% @gem_sources.each do |source| %&gt;</span>
<span class="p-Indicator">-</span> <span class="l-Scalar-Plain">&lt;%= source %&gt;</span>
<span class="l-Scalar-Plain">&lt;% end %&gt;</span>
<span class="l-Scalar-Plain">:verbose</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">true</span>
<span class="l-Scalar-Plain">gem</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">--no-doc</span></code></pre></div>


<p>By specifying the <code>/etc/gemrc</code> file manually (and then reloading it on the same chef-run) I was able to install gems from our custom gem server on bootstraping a node.  Gem installs also went MUCH faster since I added the <code>--no-doc</code> argument which prevented download RI and RDoc for each gem.</p>
]]></content>
  </entry>
  
</feed>
